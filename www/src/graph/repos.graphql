fragment ApplyLock on ApplyLock {
  id
  lock
}

fragment Category on CategoryInfo {
  category
  count
}

fragment FileContent on FileContent {
  content
  path
}

fragment Repo on Repository {
  id
  name
  notes
  description
  documentation
  icon
  darkIcon
  private
  trending
  verified
  category
  docs {
    ...FileContent
  }
  oauthSettings {
    uriFormat
    authMethod
  }
  publisher {
    ...Publisher
  }
  recipes {
    name
    provider
    description
  }
}

fragment MarketplaceRepository on Repository {
  id
  name
  description
  releaseStatus
  documentation
  icon
  darkIcon
  private
  trending
  verified
  category
  oauthSettings {
    uriFormat
    authMethod
  }
  publisher {
    ...Publisher
  }
  installation {
    ...Installation
  }
  tags {
    tag
  }
}

fragment Dependencies on Dependencies {
  dependencies {
    name
    repo
    type
    version
    optional
  }
  wait
  application
  providers
  secrets
  wirings {
    terraform
    helm
  }
  providerWirings
  outputs
}

fragment Integration on Integration {
  id
  name
  icon
  sourceUrl
  description
  tags {
    tag
  }
  publisher {
    ...Publisher
  }
}

query Repository($id: ID, $name: String) {
  repository(id: $id, name: $name) {
    ...Repo
    editable
    publicKey
    secrets
    artifacts {
      ...Artifact
    }
    installation {
      ...Installation
      oidcProvider {
        ...OIDCProvider
      }
    }
    upgradeChannels
    tags {
      tag
    }
    readme
    mainBranch
    gitUrl
    homepage
    license {
      name
      url
    }
    documentation
    community {
      discord
      slack
      homepage
      gitUrl
      twitter
    }
  }
}

mutation CreateResourceDefinition(
  $name: String!
  $input: ResourceDefinitionAttributes!
) {
  updateRepository(
    repositoryName: $name
    attributes: { integrationResourceDefinition: $input }
  ) {
    id
  }
}

mutation CreateIntegration($name: String!, $attrs: IntegrationAttributes!) {
  createIntegration(repositoryName: $name, attributes: $attrs) {
    id
  }
}

mutation UpdateRepository($name: String!, $attrs: RepositoryAttributes!) {
  updateRepository(repositoryName: $name, attributes: $attrs) {
    id
  }
}

mutation CreateRepository(
  $name: String!
  $publisher: String!
  $attributes: RepositoryAttributes!
) {
  upsertRepository(
    name: $name
    publisher: $publisher
    attributes: $attributes
  ) {
    id
  }
}

mutation AcquireLock($name: String!) {
  acquireLock(repository: $name) {
    ...ApplyLock
  }
}

mutation ReleaseLock($name: String!, $attrs: LockAttributes!) {
  releaseLock(repository: $name, attributes: $attrs) {
    ...ApplyLock
  }
}

mutation UnlockRepository($name: String!) {
  unlockRepository(name: $name)
}

query MarketplaceRepositories($publisherId: ID, $tag: String, $cursor: String) {
  repositories(
    publisherId: $publisherId
    tag: $tag
    after: $cursor
    first: 200
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...MarketplaceRepository
      }
    }
  }
}

query Scaffolds(
  $app: String!
  $pub: String!
  $cat: Category!
  $ing: Boolean
  $pg: Boolean
) {
  scaffold(
    application: $app
    publisher: $pub
    category: $cat
    ingress: $ing
    postgres: $pg
  ) {
    path
    content
  }
}

mutation DeleteRepository($id: ID!) {
  deleteRepository(repositoryId: $id) {
    id
  }
}

mutation Release($id: ID!, $tags: [String!]) {
  release(repositoryId: $id, tags: $tags)
}
