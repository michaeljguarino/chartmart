name: Plural

on:
  push:
    branches:
      - master
    paths-ignore:
      - ".github/workflows/daily.yaml"
      - ".github/workflows/firebase-hosting-pull-request.yml"
      - ".github/workflows/pr-labels.yaml"
      - ".github/workflows/publish.yaml"
      - ".github/workflows/push-to-plural.yaml"
      - ".github/workflows/www.yaml"
      - ".github/workflows/trivy-artifact-scan.yaml"
      - 'www/**'
      - "plural/**"
      - "*.md"
  pull_request:
    branches: [ master ]
    paths-ignore:
      - ".github/workflows/daily.yaml"
      - ".github/workflows/firebase-hosting-pull-request.yml"
      - ".github/workflows/pr-labels.yaml"
      - ".github/workflows/publish.yaml"
      - ".github/workflows/push-to-plural.yaml"
      - ".github/workflows/www.yaml"
      - ".github/workflows/trivy-artifact-scan.yaml"
      - 'www/**'
      - "plural/**"
      - "*.md"
jobs:
  build:
    name: Build image
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        app: [ plural, cron, worker, rtc ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Docker meta ${{ matrix.app }}
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/pluralsh/${{ matrix.app }}
            dkr.plural.sh/plural/${{ matrix.app }}
            gcr.io/pluralsh/${{ matrix.app }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Test Build ${{ matrix.app }} image
        uses: docker/build-push-action@v3
        with:
          context: "."
          file: "./Dockerfile"
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=${{ matrix.app }}
            GIT_COMMIT=$GITHUB_SHA
      - name: Run Trivy vulnerability scanner on ${{ matrix.app }} image
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          security-checks: 'vuln,secret'
          ignore-unfixed: true
           #severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  trivy-scan:
    name: Trivy fs scan
    runs-on: ubuntu-20.04
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          hide-progress: false
          skip-dirs: 'www,plural'
          format: 'sarif'
          output: 'trivy-results.sarif'
          security-checks: 'vuln,secret'
          ignore-unfixed: true
          #severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  test:
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.11.4' # Define the elixir version [required]
          otp-version: '23.3' # Define the OTP version [required]
      - uses: azure/setup-helm@v3
        with:
          version: latest
      - name: install plural cli
        run: |
          mkdir scratch && cd scratch
          curl -sL 'https://github.com/pluralsh/plural-cli/releases/download/v0.5.18/plural-cli_0.5.18_Linux_amd64.tar.gz' | tar xzvf -
          chmod +x plural
          cp plural /usr/local/bin/plural
      - run: make testup
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-5-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-5
      - name: Restore _build
        uses: actions/cache@v3
        with:
          path: _build
          key: ${{ runner.os }}-mix-5-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-5
      - run: mix deps.get
      - run: mix test
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: workflow,job,repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # required
        if: always()
